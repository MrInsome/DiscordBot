ООП.

ООП в golang - GOlang Не является объектно ориентированным языком в привычном для программирования понимании. В GO есть свои приближения к этой реализации.

Наследование - Реализовано в виде структур, они в свою очередь являются типами в которые мы можем включать другие типы в.т.ч. другие структуры.
 При этом если в дочерней структуре есть реализации с тем же названием, что и в родительской - реализация родительского метода будет переписана реализацией дочернего метода.

Инкапсуляция - Реализована в виде возможности задавать переменной первую букву в верхнем или нижнем регистре. Буква в нижнем регистре будет означать что переменная, функция или метод
 будут доступны только в рамках пакета. Первая же буква в верхнем регистре даст доступ к переменной, функции или методу за рамками пакета.

Полиморфизм - Реализован в GO в виде интерфейсов. Это специальные контракты на определенное поведение для типов, при этом для типов нам необходимо реализовать методы, которые будут
 удовлетворять интерфейсам. Таким образом можно работать со всем набором типов и данных у которых реализован интерфейс как с единым типом.


Область видимости.


Что такое пакеты в GO - Это механизм переиспользования кода при котором GO файлы помещаются в общую директорию. В начале каждого такого файла объявляется слово package, а после него
 присваивается имя пакета. В рамках пакета все функции и переменные видят друг друга.

Глобальная переменная - Это переменная которая объявлена в пакете вне функции, так же если её именование в верхнем регистре - то она может быть доступна за рамками пакета.

Фигурные скобки с необъявленным оператором в GO функции - это ограниченная область видимости куска кода в рамках функции.


Операторы в GOlang.

Можно ли выполнить несколько условий в одном операторе switch case? - Да, можно если использовать fallthrough, это слово заставляет выполнить код в следующей объявленной булевой
 секции.

Strings в GOlang.

Чем являются строки в GO - Это массив байт.

Как оперировать строками - Конкатенация, другие операции помощью стандартных пакетов - strings, fmt и.т.д.

Что будет если сложить строки - При сложении двух строк мы будем получать новую строку состоящую из нескольких старых

Как определить количество символов для строки? - len() от строки будет ровняться количеству байт, для того что бы работать именно с символами необходимо преобразовать строку в []rune.
 Также есть функция RuneCountInString из utf8


Int в GOlang.


Какие численные типы есть в GO? - int от 8 до 64, uint от 8 до 64, float 32 64, complex 64 128, rune(int 32)

Чем отличается int от uint? - Int - содержит диапазон от отрицательных чисел до положительных тогда как uint это диапазон от 0 в сторону увеличения.

Что такое обычный int и какие есть нюансы его реализации? - Это тип целочисленных данных который при компиляции в зависимости от разрядности архитектуры принимает тип данных int32
  или int64.

Как преобразовать int в строку? - Для преобразования используем функции Atoi и Itoa из библиотеки strconv для int а ParseInt и FormatInt для int64

Сколько в памяти занимают реализации int32 и int64? - int32/8 = 4 байта. int64/8 = 8 байт

Какой результат получим если разделить int на 0 и float на 0? - Ошибка компиляции, деление на ноль в результате даст бесконечность.


Const в Golang.


Что такое константы и можно ли их изменять? - Это неизменяемые переменные.

Что такое iota? - Идентификатор, который позволяет создавать последовательные не типизированные целочисленные константы. Значением iota является индекс.
 если изменить значение первого индекса, то это повлияет на значения последующих констант.

Array и slice в Golang


Что такое слайс и чем он отличается от массива - Слайс это структура, включает в себе указатель на базовый массив, у слайса есть две переменные len и cap
length - Длина слайса или количество элементов которое в нём сейчас находится.
capacity - Последовательно выделенная область памяти - то количество элементов которое мы можем записать в слайс без дополнительного расширения
array(массив) - Выделенная область памяти. Частью типа array является его размер, который, в том числе является не изменяемым

Как работает базовая функция append для go - На вход принимает слайс и переменное количество элементов для добавления в слайс. Расширяет слайс за пределы len, возвращая новый слайс.
Если количество элементов не будет превышать cap, то вернется новый слайс, который будет ссылаться на тот же базовый массив, что и предыдущий. Если же превышает, то вернется новый
слайс для которого будет перевыделена память в виде нового массива.

Какой размер массива выделяется под слайс при его расширении за рамки его емкости? - Если коротко то х2 от изначальной capacity. Если развёрнуто то - расширение после определённых
значений будет увеличиваться не в 2 раза а вычисляться по специальной формуле -
1. если требуемая cap для расширения будет больше чем в 2 раза превышающая исходную то новая cap будет равна требуемой.
2. если первое условие не выполнено, а так же если len текущего слайса меньше 1024, то новая cap будет в два раза больше базовой.
3. если оба условия не выполнены, то емкость будет увеличиваться в цикле на четверть от базовой емкости пока не будет обработано переполнение.


Map в Golang


Как реализована map(карта) go? - Это структура, реализующая операции хеширования. Как любую структуру, содержащую ссылки на области памяти, её нужно инициализировать.
map ссылается на элементы bucket, которые содержат - 8 бит с помощью которых осуществляется доступ до значений bucket, ссылка на следующий bucket, 8 пар ключ-значение уложенных в
массив.

Почему нельзя брать ссылку на значение, хранящееся по ключу в map? - потому что map поддерживает процедуру эвакуации. Это означает что значения, которые хранятся в определённой
ячейки памяти в текущий момент, в следующий момент времени могут там не храниться.

Что такое эвакуация, и в каком случае она будет происходить? - это процесс расширения map, значения переносятся из одной области памяти в другую. Учитывая то, что количество
в каждом отдельном bucket максимально равно 8, то когда среднее количество значений будет составлять 6.5 go поймет что размер map не удовлетворяет необходимому и расширит map.


Какие есть особенности синтаксиса получения и записи значений в map? - Нельзя получить значение из map которую мы предварительно не аллоцировали, приложение словит панику.
Если ключ не найден мы получим дефолтное значение типа значений map. Если нам необходимо понять есть ли значение по переданному ключу - необходимо использовать специальный синтаксис.
Он будет возвращать не только само значение, но и булевую переменную, которая показывает - удалось ли получить значение по ключу.

Как происходит поиск по ключу в map? - 1. Вычисляется хеш от ключа. 2. С помощью значения хеша и размера bucket вычисляется используемый для хранения bucket. 3. В полученном bucket
последовательно сравнивается каждый из 8 его дополнительных хешей с дополнительным хэшем ключа. 4. Если дополнительные хеши совпали, то получаем ссылку на значение и возвращаем его
5. Если дополнительные хеши не совпал, и в bucket больше нет дополнительных хешей, алгоритм переходит в следующий bucket, ссылка на который хранится в текущем. 6. Если в текущем
bucket нет ссылки на следующий bucket, а значение так и не найдено, возвращается дефолтное значение.


Интерфейсы в GOlang


Что такое интерфейсы в go? - Это контракт по которому тот или иной объект будет реализовывать поведение указаное в интерфейсе. (Это структура, в которой описаны методы, которые
должны быть реализованы для других структур, которые будут удовлетворять этому интерфейсу.)

Удовлетворение интерфейсу - Если объект описывает реализацию методов интерфейса - он на неявном уровне будет ему удволетворять без дополнительных объявлений в коде.

Что такое пустой интерфейс - Это контракт для реализации которого не нужно описывать ни одного метода. Таким образом ему может соответствовать любой тип.

Что такое nil интерфейс? - Это означает что интерфейс не ссылается на какое либо значение, но при этом содержит в себе информацию служебного поля itab

Как преобразовать интерфейс к другому типу? - Интерфейс можно преобразовать в базовый тип значения. Для этого используется синтаксис, возвращающий две переменные, одна из которых
булевая. В случае если не удалось преобразовать интерфейс, булевая переменная будет ложной, а переменная базового типа к которому приводим интерфейс будет равна дефолтному значению
типа.

Как определить тип интерфейса? - С помощью инструкции switch case, указав возможные варианты базовых значений.


Инструкция defer


Зачем используется ключевое слово defer в go? - Добавляет переданную после него функцию в стэк. При возврате внешней функции, вызываются все, добавленные в стэк вызовы. Поскольку
стек работает по принципу LIFO, значения стэека возвращаются от последнего к первому. Таким образом с defer функции будут вызываться в обратной последовательности от объявления их
во внешней функции.

Как передаются значения в функции, перед которыми указано ключевое слово defer? - Аргументы функций, перед которыми указано ключевое слово defer оцениваются немедленно.
То есть на тот момент, когда переданы в функцию.


Что такое Git flow? - Это методика при которой используются функциональные ветки и несколько основных. 1.Main\Master 2. Develop 3. Cheese 4. Release 5. Hotfix